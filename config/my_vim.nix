{neovim, vimUtils, vimPlugins, stdenv, fetchgit}:
# note: this is a new configuration using neovim and coc
# it's not yet completely operational

let customPlugins = {
  # generated by https://gist.github.com/jagajaga/3c7ba009ee6756e12978
  vim-openscad = vimUtils.buildVimPlugin {
    name = "openscad-git-2015-07-21";
    src = fetchgit {
      url = "https://github.com/sirtaj/vim-openscad.git";
      rev = "2ac407dcc73176862524e0cf18c00d85146fac57";
      sha256 = "0x3g9h0cnk7hfpqx8x92xy7mhvq2piwy3mhwds8nnn2rsa5jj0cf";
    };
    meta = {
      homepage = https://github.com/sirtaj/vim-openscad;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
    };
  };
  gruvbox-community = vimUtils.buildVimPlugin {
    name = "gruvbox-git-2019-06-03";
    src = fetchgit {
      url = "https://github.com/gruvbox-community/gruvbox.git";
      rev = "0fbea40d9885021f0e14936f7ef8756f58860cb0";
      sha256 = "1yyqzxywmh1f6gqfk38l46j5mmqrgk522235gzg1cwljhv6lqk28";
     };
    meta = {
      homepage = https://github.com/gruvbox-community/gruvbox;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
    };
  };
  completor = vimUtils.buildVimPlugin {
    name = "completor-git-2018-11-06";
    buildPhase = "true"; # building requires npm (for js) so I disabled it
    src = fetchgit {
      url = "https://github.com/maralla/completor.vim.git";
      rev = "9d1b13e8da098aeb561295ad6cf5c3c2f04e2183";
      sha256 = "0inng9a4532wgpq3scd80qvijfvs9glnpizk8agk68c69n4809lx";
      };
      meta = {
      homepage = https://github.com/maralla/completor.vim;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
      };
    };
  };
custom_config = ''
filetype plugin indent on

set shell=/bin/sh " this is required for coc.nvim

" airline :
" for terminology you will need either to export TERM='xterm-256color'
" or run it with '-2' option
let g:airline_powerline_fonts = 1
set laststatus=2
au VimEnter * exec 'AirlineTheme hybrid'

set encoding=utf-8

set notermguicolors

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

let g:gruvbox_italic=1
let g:gruvbox_bold=1
set background=dark

syntax on
colo gruvbox

" set background=light
" colo PaperColor

set number

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" replace tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/

" some more rust
let g:rustfmt_autosave = 1
let g:rust_conceal = 1
set hidden
au BufEnter,BufNewFile,BufRead *.rs syntax match rustEquality "==\ze[^>]" conceal cchar=≟
au BufEnter,BufNewFile,BufRead *.rs syntax match rustInequality "!=\ze[^>]" conceal cchar=≠

"""" everything after here is coc related
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function',\'\')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'';
in neovim.override {
 vimAlias = true;
 configure = {
   customRC = custom_config;
   vam.knownPlugins = vimPlugins // customPlugins;
   vam.pluginDictionaries = [
     { names = [
         "vim-sensible"
         "vim-airline"
         "vim-airline-themes"
         "gruvbox-community"
         "vim-devicons"
         "webapi-vim"
         "vim-fugitive"
         "nerdtree"
         "rust-vim"
#         "vim-addon-nix" # does not work with neovim
         "vim-nix"
         "coc-nvim"
         # "coc-rls" # these two don't seem to work. you need to install them manually
         # "coc-python" # using :CocInstall coc-rls and :CocInstal coc-python
         "papercolor-theme"
         "vim-openscad"
         "vim-gitgutter"
         "molokai"
         "vim-obsession"
       ];
     }
   ];
 };
}
