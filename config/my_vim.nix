{vim_configurable, vimUtils, vimPlugins, stdenv, fetchgit}:

let customPlugins = {
  # generated by https://gist.github.com/jagajaga/3c7ba009ee6756e12978
  vim-openscad = vimUtils.buildVimPlugin {
    name = "openscad-git-2015-07-21";
    src = fetchgit {
      url = "https://github.com/sirtaj/vim-openscad.git";
      rev = "2ac407dcc73176862524e0cf18c00d85146fac57";
      sha256 = "0x3g9h0cnk7hfpqx8x92xy7mhvq2piwy3mhwds8nnn2rsa5jj0cf";
    };
    meta = {
      homepage = https://github.com/sirtaj/vim-openscad;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
    };
  };
  papercolor-theme = vimUtils.buildVimPlugin {
    name = "papercolor-theme-git-2018-09-03";
    src = fetchgit {
      url = "https://github.com/NLKNguyen/papercolor-theme.git";
      rev = "5bd7d5b3f9dd0650e6bbd1756feebe1651fa6ba8";
      sha256 = "061551ih3pndnlimxqwa5hrxwn8knpzf87hr6q3zwr9pdfmqpm9l";
      };
      meta = {
      homepage = https://github.com/NLKNguyen/papercolor-theme;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
      };
  };
  completor = vimUtils.buildVimPlugin {
    name = "completor-git-2018-11-06";
    buildPhase = "true"; # building requires npm (for js) so I disabled it
    src = fetchgit {
      url = "https://github.com/maralla/completor.vim.git";
      rev = "9d1b13e8da098aeb561295ad6cf5c3c2f04e2183";
      sha256 = "0inng9a4532wgpq3scd80qvijfvs9glnpizk8agk68c69n4809lx";
      };
      meta = {
      homepage = https://github.com/maralla/completor.vim;
      maintainers = [ stdenv.lib.maintainers.jagajaga ];
      };
  };
}; in
vim_configurable.customize {
  name = "vim";

  # add imy custom .vimrc
  vimrcConfig.customRC = ''
      filetype plugin indent on

      " configure maralla/completor to use tab
      " other configurations are possible (see website)
      inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
      inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
      inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

      " ultisnips default bindings compete with completor's tab
      " so we need to remap them
      let g:UltiSnipsExpandTrigger="<c-t>"
      let g:UltiSnipsJumpForwardTrigger="<c-b>"
      let g:UltiSnipsJumpBackwardTrigger="<c-z>"

      " airline :
      " for terminology you will need either to export TERM='xterm-256color'
      " or run it with '-2' option
      let g:airline_powerline_fonts = 1
      set laststatus=2
      au VimEnter * exec 'AirlineTheme hybrid'

      set encoding=utf-8

      set notermguicolors " i don't believe in truecolor anymore
      let g:gruvbox_italic=1
      let g:gruvbox_bold=1
      set background=dark

      syntax on
      colo gruvbox

      " set background=light
      " colo PaperColor

      set number

      let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

      " replace tabs
      set tabstop=4
      set shiftwidth=4
      set softtabstop=4
      set expandtab

      " highlight trailing whitespace
      highlight ExtraWhitespace ctermbg=red guibg=red
      match ExtraWhitespace /\s\+\%#\@<!$/

      " some more rust
      let g:LanguageClient_loadSettings = 1 " this enables you to have per-projects languageserver settings in .vim/settings.json
      let g:rustfmt_autosave = 1
      let g:rust_conceal = 1
      set hidden
      au BufEnter,BufNewFile,BufRead *.rs syntax match rustEquality "==\ze[^>]" conceal cchar=≟
      au BufEnter,BufNewFile,BufRead *.rs syntax match rustInequality "!=\ze[^>]" conceal cchar=≠

      " let's autoindent c files
      au BufWrite *.c call LanguageClient#textDocument_formatting()

      " run language server for python, rust and c
      let g:LanguageClient_autoStart = 1
      let g:LanguageClient_serverCommands = {
      \ 'python': ['pyls'],
      \ 'rust': ['rustup', 'run', 'stable', 'rls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'go': ['go-langserver'],
      \ 'c' : ['clangd'] }

      nnoremap <F5> :call LanguageClient_contextMenu()<CR>
      nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR> " hit :pc to close the preview window
      nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  '';

    # store your plugins in Vim packages
    vimrcConfig.vam.knownPlugins = vimPlugins // customPlugins;
    vimrcConfig.vam.pluginDictionaries = [
      { names = [
        "vim-sensible"
        "vim-airline"
        "vim-airline-themes"
        "gruvbox"
        "vim-devicons"
        "webapi-vim"
        "vim-fugitive"
        "nerdtree"
        "ultisnips"
        "vim-snippets"
        "LanguageClient-neovim"
        "rust-vim"
        "vim-nix"
        "completor"
        "papercolor-theme"
        "vim-openscad"
        "vim-gitgutter"
      ]; }
    ];
  }
